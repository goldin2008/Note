"""

"""
#1 1365.有多少小于当前数字的数字
# 给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。


#2 941.有效的山脉数组
# 给定一个整数数组 arr，如果它是有效的山脉数组就返回 true，否则返回 false。


#3 1207.独一无二的出现次数
# 给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。
# 如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。


#4 283. 移动零
# 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。


#5 189. 旋转数组
# 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。


#6 724.寻找数组的中心下标
# 给你一个整数数组 nums ，请计算数组的 中心下标 。


#7 34. 在排序数组中查找元素的第一个和最后一个位置
# 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
# 如果数组中不存在目标值 target，返回 [-1, -1]。


#8 922. 按奇偶排序数组II
# 给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。


#9 35.搜索插入位置
# 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。


#10 24. 两两交换链表中的节点
# 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。


#11 234.回文链表
# 请判断一个链表是否为回文链表。


#12 143.重排链表


#13 141. 环形链表
# 给定一个链表，判断链表中是否有环。


#14 205. 同构字符串
# 给定两个字符串 s 和 t，判断它们是否是同构的。
# 如果 s 中的字符可以按某种映射关系替换得到 t ，那么这两个字符串是同构的。
# 每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。


#15 1002. 查找常用字符
# 给你一个字符串数组 words ，请你找出所有在 words 的每个字符串中都出现的共用字符（ 包括重复字符），并以数组形式返回。你可以按 任意顺序 返回答案。


#16 925.长按键入
# 你的朋友正在使用键盘输入他的名字 name。偶尔，在键入字符 c 时，按键可能会被长按，而字符可能被输入 1 次或多次。
# 你将会检查键盘输入的字符 typed。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回 True。


#17 844.比较含退格的字符串
# 给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。


#18 129. 求根节点到叶节点数字之和


#19 1382.将二叉搜索树变平衡
# 给你一棵二叉搜索树，请你返回一棵 平衡后 的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。
# 如果一棵二叉搜索树中，每个节点的两棵子树高度差不超过 1 ，我们就称这棵二叉搜索树是 平衡的 。


#20 100. 相同的树
# 给定两个二叉树，编写一个函数来检验它们是否相同。
# 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。


#21 116. 填充每个节点的下一个右侧节点指针


#22 52. N皇后II


#23 649. Dota2 参议院


#24 1221. 分割平衡字符串


#25 5.最长回文子串
# 给你一个字符串 s，找到 s 中最长的回文子串。


#26 132. 分割回文串 II
# 给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是回文。
# 返回符合要求的 最少分割次数


#27 673.最长递增子序列的个数
# 给定一个未排序的整数数组，找到最长递增子序列的个数。


#28 841.钥匙和房间
# 有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。


#29 127. 单词接龙
# 字典 wordList 中从单词 beginWord 和 endWord 的 转换序列 是一个按下述规格形成的序列：


#30 684.冗余连接


#31 685.冗余连接II


#32 657. 机器人能否返回原点
# 在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。


#33 31.下一个排列
# 实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
# 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
# 必须 原地 修改，只允许使用额外常数空间。


#34 463. 岛屿的周长


#35 1356. 根据数字二进制下 1 的数目排序