"""
注意这里的每一个状态，例如状态一，是持有股票股票状态并不是说今天一定就买入股票，
而是说保持买入股票的状态即: 可能是前几天买入的，之后一直没操作，所以保持买入股票的状态。

状态一: 持有股票状态（今天买入股票，或者是之前就买入了股票然后没有操作，一直持有）
不持有股票状态，这里就有两种卖出股票状态
状态二: 保持卖出股票的状态（两天前就卖出了股票，度过一天冷冻期。或者是前一天就是卖出股票状态，一直没操作）
状态三: 今天卖出股票
状态四: 今天为冷冻期状态，但冷冻期状态不可持续，只有一天!

确定递推公式
0: 持有股票后的最多现金
1: 不持有股票（能购买）的最多现金
2: 不持有股票（冷冻期）的最多现金

0. 达到买入股票状态（状态一）即: dp[i][0]，有两个具体操作: 
操作一: 前一天就是持有股票状态（状态一），dp[i][0] = dp[i - 1][0]
操作二: 今天买入了，有两种情况
前一天是冷冻期（状态四），dp[i - 1][3] - prices[i]
前一天是保持卖出股票的状态（状态二），dp[i - 1][1] - prices[i]
那么dp[i][0] = max(dp[i - 1][0], dp[i - 1][3] - prices[i], dp[i - 1][1] - prices[i]);

1. 达到保持卖出股票状态（状态二）即: dp[i][1]，有两个具体操作:
操作一: 前一天就是状态二
操作二: 前一天是冷冻期（状态四）
dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);

2. 达到今天就卖出股票状态（状态三），即: dp[i][2] ，只有一个操作: 
昨天一定是持有股票状态（状态一），今天卖出
即: dp[i][2] = dp[i - 1][0] + prices[i];

3. 达到冷冻期状态（状态四），即: dp[i][3]，只有一个操作:
昨天卖出了股票（状态三）
dp[i][3] = dp[i - 1][2];

优化数组:
当然，空间复杂度可以优化，定义一个dp[2][4]大小的数组就可以了，就保存前一天的当前的状态，感兴趣的同学可以自己去写一写，思路是一样的
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n == 0:
            return 0
        dp = [[0] * 4 for _ in range(n)]
        dp[0][0] = -prices[0] #持股票
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][3], dp[i-1][1]) - prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][3])
            dp[i][2] = dp[i-1][0] + prices[i]
            dp[i][3] = dp[i-1][2]
        return max(dp[n-1][3], dp[n-1][1], dp[n-1][2])
